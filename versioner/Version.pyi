from vbml import Pattern
from typing import Dict, List, Union
from .Units import STANDART_PATTERNS, STANDART_VARIATIONS, STANDART_VERSION_DATA

class Version:
    def __init__(self, version: str, version_data: Dict[str, int]) -> None: ...
    version: str
    version_data: Dict[str, int]
    hash_data: List[int]
    
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def similar_to(self, version: Version) -> bool: ...
    def __eq__(self, other: Version) -> bool: ...
    def __lt__(self, other: Version) -> bool: ...
    def __gt__(self, other: Version) -> bool: ...
    def __ne__(self, other: Version) -> bool: ...
    def __le__(self, other: Version) -> bool: ...
    def __ge__(self, other: Version) -> bool: ...

class Versioner:
    version_data: Dict[str, Union[int, float, str]]
    patterns: List[Pattern]
    variations: Dict[str, List[str]]
    
    def __init__(
        self,
        version_data: Dict[str, Union[int, float, str]]=STANDART_VERSION_DATA,
        patterns: List[str]=STANDART_PATTERNS,
        variations: Dict[str, List[str]]=STANDART_VARIATIONS
    ) -> None: ...
    
    def parse(self, string: str) -> Version: ...
